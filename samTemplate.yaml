AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: Photo Album Lambdas
Resources:
  IndexingPolicy:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Description: Role for pa-index-photos-cp
      Path: /service-role/
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonRekognitionFullAccess
        - arn:aws:iam::aws:policy/AmazonESFullAccess
        - arn:aws:iam::aws:policy/AmazonLexFullAccess
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess
        - arn:aws:iam::aws:policy/AmazonEC2ContainerServiceFullAccess
  IndexManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Managed policy for indexing lambda
      Path: /service-role/
      Roles:
        - !Ref IndexingPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: logs:CreateLogGroup
            Resource: !Sub arn:aws:logs:us-east-1:${AWS::AccountId}:*
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: 
              - !Sub arn:aws:logs:us-east-1:${AWS::AccountId}:log-group:/aws/lambda/pa-index-photos-cp:*
  SearchingPolicy:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Description: Role for pa-search-photos-cp
      Path: /service-role/
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/AmazonESFullAccess
        - arn:aws:iam::aws:policy/AmazonLexFullAccess
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess
        - arn:aws:iam::aws:policy/AmazonEC2ContainerServiceFullAccess
  SearchManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Managed policy for searching lambda
      Path: /service-role/
      Roles:
        - !Ref SearchingPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: logs:CreateLogGroup
            Resource: !Sub arn:aws:logs:us-east-1:${AWS::AccountId}:*
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: 
              - !Sub arn:aws:logs:us-east-1:${AWS::AccountId}:log-group:/aws/lambda/pa-search-photos-cp:*
  Bucket1:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: npab2
      PublicAccessBlockConfiguration:
        BlockPublicAcls: FALSE
        BlockPublicPolicy: FALSE
        IgnorePublicAcls: FALSE
        RestrictPublicBuckets: FALSE
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: 
              - "*"
            AllowedMethods: 
              - POST
              - GET
              - DELETE
              - PUT
              - HEAD
            AllowedOrigins: 
              - "*"
            ExposedHeaders: 
              - Content-Range
              - Content-Length
              - ETag
            MaxAge: 3000
  Bucket1Policy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Bucket1
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
            - '*'
            Effect: Allow
            Resource: !Sub
             - arn:aws:s3:::${PhotoBucket}/*
             - { PhotoBucket: !Ref Bucket1 }
            Principal: '*'
            Sid: PublicReadGetObject
  APIPA:
    Type: AWS::Serverless::Api
    Properties:
      StageName: PAQ
      DefinitionUri:
        Bucket: pa-lambda-pipeline
        Key: AI-Photo-Search-PA-Query3-oas30-apigateway.yaml
  pasearchphotos:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: pa-search-photos-cp
      Handler: pa_search_photos.lambda_handler
      Runtime: python3.8
      CodeUri: .
      Description: 'Lambda for searching photos'
      MemorySize: 128
      Timeout: 30
      Role: !GetAtt SearchingPolicy.Arn
      Events:
        Api1:
          Type: Api
          Properties:
            Path: /search
            Method: GET
            RequestParameters:
              - method.request.querystring.q:
                  Required: TRUE
            RestApiId: !Ref APIPA
  paindexphotos:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: pa-index-photos-cp
      Handler: pa_index_photos.lambda_handler
      Runtime: python3.8
      CodeUri: .
      Description: 'Lambda for indexing photos'
      MemorySize: 128
      Timeout: 30
      Role: !GetAtt IndexingPolicy.Arn
      Events:
        BucketEvent1:
          Type: S3
          Properties:
            Bucket:
              Ref: Bucket1
            Events: s3:ObjectCreated:Put
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: photos/
  LambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt paindexphotos.Arn
      Action: 'lambda:InvokeFunction'
      Principal: 's3.amazonaws.com'
      SourceAccount: !Sub ${AWS::AccountId}
      SourceArn: !GetAtt Bucket1.Arn
  PhotoElasticSearch:
    Type: 'AWS::Elasticsearch::Domain'
    Properties:
      DomainName: photos
      ElasticsearchVersion: '7.4'
      AccessPolicies:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - '*'
            Action:
              - 'es:*'
            Resource: !Sub arn:aws:es:us-east-1:${AWS::AccountId}:domain/photos/*
          - Effect: Allow
            Principal:
              AWS:
                - '*'
            Action:
              - 'es:*'
            Condition:
              IpAddress:
                aws:SourceIp:
                  - '0.0.0.0/0'
            Resource: !Sub arn:aws:es:us-east-1:${AWS::AccountId}:domain/photos/*
      ElasticsearchClusterConfig:
        InstanceType: t2.small.elasticsearch
        InstanceCount: 2
        DedicatedMasterEnabled: TRUE
        DedicatedMasterType: t2.small.elasticsearch
        DedicatedMasterCount: 3
        ZoneAwarenessConfig:
          AvailabilityZoneCount: 2
        ZoneAwarenessEnabled: TRUE
      EBSOptions:
        EBSEnabled: TRUE
        VolumeSize: 10
        VolumeType: gp2